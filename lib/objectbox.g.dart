// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Models/card_ob.dart';
import 'Models/group_ob.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5710923100111357117),
      name: 'CardModel',
      lastPropertyId: const IdUid(4, 3447261931277552546),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5201712115820065915),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2635270677597839733),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 270630522734884246),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3447261931277552546),
            name: 'groupId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 2800924394982974337),
            relationTarget: 'Group')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 3571238245639622754),
      name: 'Group',
      lastPropertyId: const IdUid(3, 5611401430110149955),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6314919171983341212),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4363767192553921158),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5611401430110149955),
            name: 'category',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'cards', srcEntity: 'CardModel', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 3571238245639622754),
      lastIndexId: const IdUid(1, 2800924394982974337),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CardModel: EntityDefinition<CardModel>(
        model: _entities[0],
        toOneRelations: (CardModel object) => [object.group],
        toManyRelations: (CardModel object) => {},
        getId: (CardModel object) => object.id,
        setId: (CardModel object, int id) {
          object.id = id;
        },
        objectToFB: (CardModel object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addOffset(2, imageOffset);
          fbb.addInt64(3, object.group.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CardModel(
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.group.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.group.attach(store);
          return object;
        }),
    Group: EntityDefinition<Group>(
        model: _entities[1],
        toOneRelations: (Group object) => [],
        toManyRelations: (Group object) => {
              RelInfo<CardModel>.toOneBacklink(
                      4, object.id, (CardModel srcObject) => srcObject.group):
                  object.cards
            },
        getId: (Group object) => object.id,
        setId: (Group object, int id) {
          object.id = id;
        },
        objectToFB: (Group object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final categoryOffset = fbb.writeString(object.category);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, categoryOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Group(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              category: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(
              object.cards,
              store,
              RelInfo<CardModel>.toOneBacklink(
                  4, object.id, (CardModel srcObject) => srcObject.group),
              store.box<Group>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CardModel] entity fields to define ObjectBox queries.
class CardModel_ {
  /// see [CardModel.id]
  static final id = QueryIntegerProperty<CardModel>(_entities[0].properties[0]);

  /// see [CardModel.description]
  static final description =
      QueryStringProperty<CardModel>(_entities[0].properties[1]);

  /// see [CardModel.image]
  static final image =
      QueryStringProperty<CardModel>(_entities[0].properties[2]);

  /// see [CardModel.group]
  static final group =
      QueryRelationToOne<CardModel, Group>(_entities[0].properties[3]);
}

/// [Group] entity fields to define ObjectBox queries.
class Group_ {
  /// see [Group.id]
  static final id = QueryIntegerProperty<Group>(_entities[1].properties[0]);

  /// see [Group.name]
  static final name = QueryStringProperty<Group>(_entities[1].properties[1]);

  /// see [Group.category]
  static final category =
      QueryStringProperty<Group>(_entities[1].properties[2]);
}
